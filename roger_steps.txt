							**Roger-Skyline-1 Steps**
1. follow steps to set up debain 9 stretch virtual image ide (https://www.tecmint.com/installation-of-debian-9-minimal-server/)
2. use debian download in folder for disk image (Desktop/debian versions/debian-9.9.0-amd64-netinst.iso)
3  set network settings in virtualbox for your machine to Adapter1 to : briged-adapter
   set Adapter 2 to : NAT
4. machine roger1 login: brandon
5. user password: sports (same for root)
6. add current user(brandon) to sudo group to use commands outside of root
7. go to /etc/network/interfaces and add these lines for network interface changes
	**
	   allow-hotplug enp0s8
	   iface enp0s8 inet static
	   address 192.168.56.3
	   netmask 255.255.255.252
	**
	restart network interface daemon via (sudo service networking restart)
	bring interface down (sudo ifdown enp0s3, sudo ifdown enp0s8)
	bring interface up (sudo ifup enp0s3, sudo ifup enp0s8)
8. go to /etc/ssh/sshd_config and unhash as well as changes these lines
	** 
	   Port 58342
	   PermitRootLogin no
	   PasswordAuthentification yes
	   PubkeyAuthentication yes
	**
	restart SSH (sudo service sshd restart)
9. *before we change PasswordAuthentification to no we ssh into brandon@192.168.56.3 port 58342 to generate keys*
   (as user not root generate keys) ssh-keygen *should create .ssh directory /home/brandon/.ssh*
   (copy public key) cat ~/.ssh/id_rsa.pub | ssh -p 58342 brandon@10.113.100.38 "chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys"
   *exit server with exit*
   go to /etc/ssh/sshd_config change line
   **
   	PasswordAuthentification no
   **
   (restart ssh server to update sshd) service ssh restart
   (we're going to connect to the static ip) *192.168.56.3* port 58342 
   (now connect to ssh server without password) ssh -p 58342 brandon@192.168.56.3 
   (check to see if you connected successfully) sudo systemctl status ssh
   *go to /home/brandon/.ssh and check to see if know_hosts file contains your vm*
   -this user will have sudo access vi ssh and not root
   **only try to connect in /home/brandon as user not root**
10. as user not root while on ssh server brandon@192.168.56.3 port
	**execute commands below to set rules for your firewall**
	-sudo ufw default deny incoming (deny incoming packets)
	-sudo ufw default allow outgoing (allow outgoing packets)
	-sudo ufw allow 443 (allow packets for https)
	-sudo ufw allow 80/tcp (allow packts for tcp/http)
	-sudo ufw allow 25 (allow SMTP/Simple Mail Transfer Protocol)
	-sudo ufw allow 58342 (allow my port ssh)
	-sudo ufw allow from 10.113.100.38 to any port 58342 proto tcp (allow connect, good measure)
	-sudo systemctl start ufw (start ufw script)
	-sudo systemctl enable ufw (enable ufw script)
	-sudo ufw enable (get ufw running with the applied rules) **(to disable firewall rules) ufw disable**
	-sudo ufw status (check if rules were set correctly and ufw is running)
	-sudo exit
	-sudo reboot (to make absolute sure ufw is running with the set rules)
	**if you need to delete a rule use (sudo ufw delete RULE)**
11. since we already installed fail2ban and when you're inside ssh server
	-cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local (use the basic configuration setup)
	in /etc/fail2ban/jail.local file change line to allow ssh connections from our ip's
	**
	  ignoreip = 127.0.0.1/8 <our ip's> <our ip's>
	**
	-sudo systemctl start fail2ban (good measure)
	-sudo systemctl enable fail2ban (good measure)
	-sudo service fail2ban restart (restart fail2ban)
	-sudo /etc/init.d/fail2ban start (start client)
	-sudo fail2ban-client status (check status of client)
 	-sudo tail -f /var/log/fail2ban.log (live check if attempted DOS attack)
	-sudo cat /var/log/fail2ban.log (check what has been done)
12. We're going to be using psad(Port Scan Attacks Detector) to detect and or stop port scan attacks
	***after installed***
	-(rsyslog configuration(logging)) go to /etc/rsyslog.conf file and add this line
	  **
	  	kern.info |/var/lib/psad/psadfifo
	  **
	-(restart rsyslog service) sudo /etc/init.d/rsyslog restart
	-(psad configuration(program setup)) go to /etc/psad/psad.conf and change lines
	**
	   HOSTNAME 	roger1;
	   ENABLE_AUTO_IDS		Y;
	   IPTABLES_BLOCK_METHOD   Y;
	**
	-(start psad service) sudo /etc/init.d/psad restart
	***update firewall rules for logging with following commands***
	-sudo iptables -A INPUT -j LOG
	-sudo iptables -A FORWARD -j LOG
	-sudo ip6tables -A INPUT -j LOG
	-sudo ip6tables -A FORWARD -j LOG
	***update and reload psad**
	-sudo psad -R (restart)
	-sudo psad --sig-update (update)
	-sudo psad -H (send psad daemons a signal to re-read config files)
	-(after tested, run command to check logs) sudo psad -S
	*the port scan report will be stored in /var/log/psad/status.out file*
	**if nmap isnt on host machine install for testing**
	****ON HOST MACHINE****
	-nmap -Pn 10.113.100.38 (testing port scanning)
	****ON VM****
	-sudo psad --fw-rm-block-ip 10.113.7.23 (allows host ip to scan ports)	
	-sudo psad --fw-rm-block-ip 10.113.100.38 (allows vim ip to scan ports)
	-(use commands for update and reload to restart psad config)
13. run the command (sudo service --status-all)
	(we're supposed to stop services not used, but as a debian server setup currently we need all)
	-acron (time-based job scheduler but it assumes the machine isnt running constantly)
	-cron (time-based job scheduler)
	-kmod (kernel modules)
	-hwclock.sh (hardware clock)
	-exim4 (message transfer, uniox system internet connection)
	-udev (device file system)
	-procps (displays info about users on machine)
	-dbus (system daemon about current session)
	-resolvconf (needed for configuring other files ex. networking and interface)
14. in /root/ft_scripts/update_script.sh paste these lines
	**
	  #!/bin/bash

	  apt update -y >> /var/log/update_script.log
      apt upgrade -y >> /var/log/update_script.log
      echo '-------------------------' >> /var/log/update_script.log
      date -u >> /var/log/update_script.log

	**
	(give owner, group, and public to execute script but only the owner can modify the script)
	-chmod 755 /root/ft_scripts/update_script.sh
	-chown root /root/ft_scripts/update_script.sh (make root the owner of the script)
	-crontab -e (setting time to execute script)
	-pick witch file editor you want to use(ex.2) vim.basic
	(insert these lines into file)
	**
		0 4 * * mon root /root/ft_scripts/update_script.sh
		@reboot root /root/ft_scripts/update_script.sh
	**
	(exit file)
	-sudo service cron reload (restart cron service to apply changes)
15. in /root/ft_scripts/cron_check.sh paste these lines
	**
		#!/bin/bash
		[ -z `find /etc/crontab -mmin -1440` ]

		if [ $? -eq 0 ]
		then
			echo "crontab has been modified today" | mail -s "crontab activity" root@roger1
		else
			echo "crontab has not been modified today" | mail -s "crontab activity" root@roger1
		fi
	**
	(give owner, group, and public to execute script but only the owner can modify the script)
	-chmod 755 /root/ft_scripts/cron_check.sh
	-chown root /root/ft_scripts/cron_check.sh (make root the owner of the script)
	-crontab -e (setting time to execute script)
	(insert these lines into file)
	**
		0 0 * * * root /root/ft_scripts/crontab_check.sh
	**
	(exit file)
	sudo service cron reload (restart cron service to apply changes)

								**Command Steps**
1. ->su root
2. ->apt update && apt upgrade
3. ->apt install sudo && apt install vim && apt install net-tools && apt install ssh && apt install open-ssh && apt install ufw && apt update (use of sudo, vim, ifconfig, ssh, ufw(firewall), fail2ban(DoS protection))
4. ->adduser brandon sudo
5. ->exit (leaving root to user)
6. ->reboot (so user can be added to sudoers file)
8. ->see (roger-skyline-1 step 7)
9. ->sudo ip a (to see if network interface was applied)
10.->see (roger-skyline-1 step 8)
11.->see (roger-skyline-1 step 9)
12.->see (roger-skyline-1 step 10)
13. ssh -p 58342 brandon@192.168.56.3
14. sudo apt install fail2ban
15. sudo apt update
16.->see (roger-skyline-1 step 11)
17. sudo ping -f 192.168.56.3 -l 600
18. sudo apt install psad
19. sudo apt update
20.->see (roger-skyline-1 step 12)
21 sudo service --status-all
22.->see (roger-skyline-1 step 13)
23. su root
24. cd root
25. mkdir ft_scripts
26. cd ft_scripts
27. touch update_script.sh
28.->see (roger-skyline-1 step 14)
29. touch cron_check.sh
30.->see (roger-skyline-2 step 15)

**Make sha hash file info**
- (make sha hash with vdi file) sha1sum roger.vdi > checksum.sha1
- (check sha hash) echo '<hash code>  roger.vdi' | shasum -c
